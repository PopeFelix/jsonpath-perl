# JSONPath (Perl) - XPath for JSON and Perl #

JSONPath is the brainchild of [Stephan Goessner](http://goessner.net/). It takes the basic concept of XPATH and, using similar syntax, applies it to JSON data structures. This documentation is taken directly from [Stephan's JSONPath page](http://goessner.net/articles/JsonPath/) with minor tweaks specific to the Perl port. You can find the JavaScript, PHP, and C# implementation of it on [the JSONPath page at Google Code](http://code.google.com/p/jsonpath/).

JSONPath is distributed under the MIT License.

## JSONPath expressions ##

JSONPath expressions always refer to a JSON structure in the same way as XPath expression are used in combination with an XML document. Since a JSON structure is usually anonymous and doesn't necessarily have a "root member object" JSONPath assumes the abstract name $ assigned to the outer level object.

JSONPath expressions can use the dot notation

	$.store.book[0].title

or the bracket notation

	$['store']['book'][0]['title']

for input pathes. Internal or output pathes will always be converted to the more general bracketâ€“notation.

JSONPath allows the wildcard symbol * for member names and array indices. It borrows the descendant operator '..' from E4X and the array slice syntax proposal [start:end:step] from ECMASCRIPT 4.

Expressions of the underlying scripting language (<expr>) can be used as an alternative to explicit names or indices as in

	$.store.book[(@.length-1)].title

using the symbol '@' for the current object. Filter expressions are supported via the syntax ?(<boolean expr>) as in

	$.store.book[?(@.price < 10)].title

Here is a complete overview and a side by side comparison of the JSONPath syntax elements with its XPath counterparts.
<table><tbody><tr class="evn"><td> <strong>XPath</strong> </td><td> <strong>JSONPath</strong> </td><td> <strong>Result</strong> </td></tr>
<tr class="odd"><td class="lft"><code>/store/book/author</code> </td><td class="lft"><code>$.store.book[*].author</code> </td><td class="lft">the authors of all books in the store </td></tr>
<tr class="evn"><td class="lft"><code>//author</code> </td><td class="lft"><code>$..author</code> </td><td class="lft">all authors </td></tr>

<tr class="odd"><td class="lft"><code>/store/*</code> </td><td class="lft"><code>$.store.*</code> </td><td class="lft">all things in store, which are some books and a red bicycle. </td></tr>
<tr class="evn"><td class="lft"><code>/store//price</code> </td><td class="lft"><code>$.store..price</code> </td><td class="lft">the price of everything in the store. </td></tr>
<tr class="odd"><td class="lft"><code>//book[3]</code> </td><td class="lft"><code>$..book[2]</code> </td><td class="lft">the third book </td></tr>

<tr class="evn"><td class="lft"><code>//book[last()]</code> </td><td class="lft"><code>$..book[(@.length-1)]</code><br>
<code>$..book[-1:]</code> </td><td class="lft">the last book in order. </td></tr>
<tr class="odd"><td class="lft"><code>//book[position()&lt;3]</code> </td><td class="lft"><code>$..book[0,1]</code><br>
<code>$..book[:2]</code> </td><td class="lft">the first two books </td></tr>

<tr class="evn"><td class="lft"><code>//book[isbn]</code> </td><td class="lft"><code>$..book[?(@.isbn)]</code> </td><td class="lft">filter all books with isbn number </td></tr>
<tr class="odd"><td class="lft"><code>//book[price&lt;10]</code> </td><td class="lft"><code>$..book[?(@.price&lt;10)]</code> </td><td class="lft">filter all books cheapier than 10 </td></tr>
<tr class="evn"><td class="lft"><code>//*</code> </td><td class="lft"><code>$..*</code> </td><td class="lft">all Elements in XML document. All members of JSON structure. </td></tr>
<tr class="odd"><td class="lft"><code>???</code> </td><td class="lft"><code>$.store.!</code> </td><td class="lft">all the keys in the store hash (bicycle, book)</td></tr>
</tbody></table>

XPath has a lot more to offer (Location pathes in not abbreviated syntax, operators and functions) than listed here. Moreover there is a remarkable difference how the subscript operator works in Xpath and JSONPath.

    * Square brackets in XPath expressions always operate on the node set resulting from the previous path fragment. Indices always start by 1.
    * With JSONPath square brackets operate on the object or array addressed by the previous path fragment. Indices always start by 0. 

 
[edit] [comment] [remove] |2007-08-18| e3 # JSONPath examples

Let's practice JSONPath expressions by some more examples. We start with a simple JSON structure built after an XML example representing a bookstore (original XML file).

	{ "store": {
		"book": [ 
		  { "category": "reference",
			"author": "Nigel Rees",
			"title": "Sayings of the Century",
			"price": 8.95
		  },
		  { "category": "fiction",
			"author": "Evelyn Waugh",
			"title": "Sword of Honour",
			"price": 12.99
		  },
		  { "category": "fiction",
			"author": "Herman Melville",
			"title": "Moby Dick",
			"isbn": "0-553-21311-3",
			"price": 8.99
		  },
		  { "category": "fiction",
			"author": "J. R. R. Tolkien",
			"title": "The Lord of the Rings",
			"isbn": "0-395-19395-8",
			"price": 22.99
		  }
		],
		"bicycle": {
		  "color": "red",
		  "price": 19.95
		}
	  }
	}

<table><tbody><tr class="evn"><td> <strong>XPath</strong> </td><td> <strong>JSONPath</strong> </td><td> <strong>Result</strong> </td></tr>
<tr class="odd"><td class="lft"><code>/store/book/author</code> </td><td class="lft"><code>$.store.book[*].author</code> </td><td class="lft">the authors of all books in the store </td></tr>
<tr class="evn"><td class="lft"><code>//author</code> </td><td class="lft"><code>$..author</code> </td><td class="lft">all authors </td></tr>

<tr class="odd"><td class="lft"><code>/store/*</code> </td><td class="lft"><code>$.store.*</code> </td><td class="lft">all things in store, which are some books and a red bicycle. </td></tr>
<tr class="evn"><td class="lft"><code>/store//price</code> </td><td class="lft"><code>$.store..price</code> </td><td class="lft">the price of everything in the store. </td></tr>
<tr class="odd"><td class="lft"><code>//book[3]</code> </td><td class="lft"><code>$..book[2]</code> </td><td class="lft">the third book </td></tr>

<tr class="evn"><td class="lft"><code>//book[last()]</code> </td><td class="lft"><code>$..book[(@.length-1)]</code><br>
<code>$..book[-1:]</code> </td><td class="lft">the last book in order. </td></tr>
<tr class="odd"><td class="lft"><code>//book[position()&lt;3]</code> </td><td class="lft"><code>$..book[0,1]</code><br>
<code>$..book[:2]</code> </td><td class="lft">the first two books </td></tr>

<tr class="evn"><td class="lft"><code>//book[isbn]</code> </td><td class="lft"><code>$..book[?(@.isbn)]</code> </td><td class="lft">filter all books with isbn number </td></tr>
<tr class="odd"><td class="lft"><code>//book[price&lt;10]</code> </td><td class="lft"><code>$..book[?(@.price&lt;10)]</code> </td><td class="lft">filter all books cheapier than 10 </td></tr>
<tr class="evn"><td class="lft"><code>//*</code> </td><td class="lft"><code>$..*</code> </td><td class="lft">all Elements in XML document. All members of JSON structure. </td></tr>
<tr class="odd"><td class="lft"><code>???</code> </td><td class="lft"><code>$.store.!</code> </td><td class="lft">all the keys in the store hash (bicycle, book)</td></tr>


</tbody></table>

## JSONPath implementation

JSONPath.pm is a simple perl class, ported from the Javascript and PHP versions, that can be wrapped within a script like jsonpath.pl to give command line inspection into a JSON file or leveraged in a larger application. To use it simply parse the JSON with your favorite JSON library, create an instance of JSONPath, and pass the parsed json to it's run method along with your JSONPath expression


    use JSON;
    my $json_structure = from_json($raw_json);
    my $jp = JSONPath->new();
    my $raw_result = $jp->run($json_structure, "$..author"); # either a data structure or zero
    print to_json($raw_result, {utf8 => 1, pretty => 1}) . "\n";

The run method also takes an optional third argument, a hash with any options. Currently the only supported option is "result_type" => PATH. Unfortunately it doesn't work correctly in the Perl port yet. If this is something you need please download it and help add this functionality, as it's quite close to working.
results

the example results in the following arrays:

	res1:
	[ "Nigel Rees",
	  "Evelyn Waugh",
	  "Herman Melville",
	  "J. R. R. Tolkien"

	]

	res2 (CURRENTLY BROKEN IN THE PERL VERSION):
	[ "$['store']['book'][0]['author']",
	  "$['store']['book'][1]['author']",
	  "$['store']['book'][2]['author']",
	  "$['store']['book'][3]['author']"
	]

Please note, that the return value of jsonPath is an array, which is also a valid JSON structure. So you might want to apply jsonPath to the resulting structure again or use one of your favorite array methods as sort with it.
 
Issues

* PATH option doesn't produce useful results
* Currently only single quotes allowed inside of JSONPath expressions.
* Script expressions inside of JSONPath locations are currently not recursively evaluated by jsonPath. Only the global $ and local @ symbols are expanded by a simple regular expression.
* An alternative for jsonPath to return false in case of no match may be to return an empty array in future.

